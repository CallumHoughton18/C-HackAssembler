// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 256 rows (indexed 0..255, top to bottom)
 * of 512 pixels each (indexed 0..511, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {

    static int color;
    static Array screen;
    static Array power2;
    
    /** Initializes the Screen. */
    function void init() {
        var int i, value;
        // set it as black to begin with
        let color = -1;
        let screen = 16384;
        let power2 = Array.new(16);

        let i = 0;
        let value = 1;
        while(i < 16) {
            let power2[i] = value;
            let i = i + 1;
            let value = value + value;
        }
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int i;
        let i = 0;
        while ( i < 8192 ) {
            let screen[i] = 0;
        }
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        if (b) { let color = -1; }
        else { let color = 0; }
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        // array accessing is much faster that calling peek and poke
        // which is important when drawing to the screen
        var int relativeAddress, address, value, bitRequired;


        let relativeAddress = (y * 32) + (x / 16);
        let address = screen + relativeAddress;
        let bitRequired = x - (16 * (x / 16));

        let value = screen[relativeAddress];

        if (color = -1) {
            let value = (value | power2[bitRequired]);
            let screen[relativeAddress] = value;
        }
        else {
            let value = (value & ~power2[bitRequired]);
            let screen[relativeAddress] = value;
        }
               
        return;
    }

        /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int dx, dy, a, b, diff, temp, xModifier, yModifier;

        let a = 0;
        let b = 0;
        let diff = 0;

        let dx = x2 - x1;
        let dy = y2 - y1;

        if (dx < 0) { let xModifier = -1; }
        else { let xModifier = 1; }

        if (dy < 0) { let yModifier = -1; }
        else { let yModifier = 1; }

        let dx = Math.abs(dx);
        let dy = Math.abs(dy);

        // Horizontal line
        if (dy = 0) {
            // The unoptimized way of doing this is commented out
            // while (~(a = dx)) {
            //     let a = a + 1;
            //     do Screen.drawPixel(x1 + (a * xModifier), y1);
            // }
            do Screen.drawHorizontalLine(x1, x2, y1);
            return;
        }

        // Vertical line
        if (dx = 0) {
            while (~(b = dy)) {
                let b = b + 1;
                do Screen.drawPixel(x1, y1 + (b * yModifier));
            }
            return;
        }
        
        while(((a < dx) | (a = dx)) & ((b < dy) | (b = dy))) {
            do Screen.drawPixel(x1 + (a * xModifier), y1 + (b * yModifier));
            if (diff < 0) {
                let a = a + 1;  
                let diff = diff + dy;
            }
            else {
                let b = b + 1;
                let diff = diff - dx;
            }
        }
        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int i;
        let i = y1;
        while (i < (y2 + 1)) {
            do Screen.drawHorizontalLine(x1, x2, i);
            let i = i + 1;
        }
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int dy, base, x1, x2;

        if (r > 181){ return; }

        let dy = -r;

        while (dy < (r + 1)) {
            let base = Math.sqrt((r * r) - (dy * dy));
            let x1 = x - base;
            let x2 = x + base;

            do Screen.drawHorizontalLine(x1, x2, (y+dy));
            let dy = dy + 1;
        }
        return;
    }

    function void drawHorizontalLine(int x1, int x2, int y) {
        var int temp, relativeAddress, chunk;

        // always make sure x2 > x1
        if (x2 < x1) {
            let temp = x1;
            let x1 = x2;
            let x2 = temp;
        }

        let chunk = x1;

        // this draws pixel by pixel, until we can safely draw a 16 bit chunk
        // which makes horizontal line rendering a lot quicker.
        while (chunk < (x2 + 1)) {
            // if chunk modulo 16 != 0 OR 16 bit chunk size would be greater than x2
            if (~((chunk - (16 * (chunk/16))) = 0) | ((chunk + 16) > x2)) {
                do Screen.drawPixel(chunk, y);
                let chunk = chunk + 1;
            }
            else {
                let relativeAddress = (y * 32) + (chunk / 16);
                let screen[relativeAddress] = color;

                if ((chunk + 16) < (x2 + 1)) { let chunk = chunk + 16; }
            }
        }
        return;
    }
}
