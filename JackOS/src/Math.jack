// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
    static Array twoToThe;
    /** Initializes the library. */
    function void init() {
        let twoToThe = Array.new(16);
        let twoToThe[0] = 1;
        let twoToThe[1] = 2;
        let twoToThe[2] = 4;
        let twoToThe[3] = 8;
        let twoToThe[4] = 16;
        let twoToThe[5] = 32;
        let twoToThe[6] = 64;
        let twoToThe[7] = 128;
        let twoToThe[8] = 256;
        let twoToThe[9] = 512;
        let twoToThe[10] = 1024;
        let twoToThe[11] = 2048;
        let twoToThe[12] = 4096;
        let twoToThe[13] = 8192;
        let twoToThe[14] = 16384;
        // -1 instead of 32768 because of two's complement
        // as that binary number overflows to -1
        let twoToThe[15] = -1;
        return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if (x < 0) { return -x; }
        return x;
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int sum, shiftedX, i;
        let sum = 0;
        let shiftedX = x;

        let i = 0;
        while (i < 16) 
        {
            if (Math.bit(y, i)) 
            {
                let sum = sum + shiftedX; 
            }
            let shiftedX = shiftedX + shiftedX;
            let i = i + 1;
        }
        return sum;
    }

    function boolean bit (int x, int i) {
        // given x = 9, i = 1
        // binary x = 0000000000001001
        //
        // [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768]
        return ~((x & twoToThe[i]) = 0);
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var int q, result;
        var int negX, negY;

        let negX = x < 0;
        let negY = y < 0;

        let x = Math.abs(x);
        let y = Math.abs(y);   

        if (y > x){ return 0; }
        
        let q = Math.divide(x, y + y);
        if(x - (2 * q * y) < y) {
            let result = q + q;
        }
        else 
        {
            let result = q + q + 1;
        }

        if (negX = negY) { return result; }
        else {return -result; }  
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int low, high, med, medSqred;
        let low = 0;
        let high = x;	
		
        // Handle 16 bit overflow
        if (x = 32767){ return 181; }
        if (x < 0) { return -1; }

        while (low < (high + 1))
        {
            let med = (low + high) / 2;
            let medSqred = med * med;
			
            if (medSqred < (x + 1)) 
            {
                let low = med + 1;
            }
            else 
            {
                let high = med - 1;
            }
        }
		
        return low - 1;	
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if (a < b) { return b; }
        return a;
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if (a < b) { return a; }
        return b;
    }
}
