// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {

    static Array ram;
    static Array heap;
    static Array freeList;
    /** Initializes the class. */
    function void init() {
        let ram = 0;
        let heap = 2048;
        let freeList = 2048;
        let heap[0] = 0;
        let heap[1] = 14335;
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        var int value;
        let value = ram[address];
        return value;
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let ram[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var boolean foundSegment;
        var int address, registersFree, foundSegment, temp;

        let temp = freeList;
        let address = freeList[0];

        while (~foundSegment) {
            let registersFree = freeList[1];
            if ((registersFree > size) | (registersFree = size)) {

                if (freeList[0] = 0) {
                    let foundSegment = freeList;

                    let freeList = freeList + size + 2;
                    let freeList[0] = 0;
                    let freeList[1] = freeList - size - 2;

                    let foundSegment[0] = 0;
                    let foundSegment[1] = size;

                    return foundSegment;
                }

                let temp[0] = freeList[0];
                let foundSegment = freeList;
                return foundSegment;
            }
            else {
                let temp = freeList;
                let freeList = freeList[0];
            }
        }

        return -1;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        let freeList[0] = o;
        return;
    }    
}
